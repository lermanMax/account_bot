from aiogram import types
from aiogram.dispatcher.filters import CommandStart
from aiogram.types import ReplyKeyboardRemove

from tgbot.loader import dp
from tgbot.keyboards.registered_user import promoter_keyboard, manager_keyboard
from tgbot.keyboards.phone import phone_keyboard
from tgbot.keyboards.start import start_keyboard
from tgbot.services.account_promoter import Promoter
from tgbot.services.account_manager import Manager
from tgbot.filters.unauthentificated import IsUserUnauthenticatedFilter
from tgbot.filters.promoter import IsPromoterUserFilter
from tgbot.interfaces.connector_bitrix import ConnectorBitrix, \
    EmployeeDoesNotExist, EmployeeAlreadyExist, PhoneAlreadyTaken, DatabaseError
from tgbot.utils.broadcast import send_messages_to_admins


@dp.message_handler(IsPromoterUserFilter(), CommandStart(), state='*')
async def start_menu_handler(
        message: types.Message, promoter: Promoter, manager: Manager):

    if isinstance(manager, Manager):
        role_name = 'C—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä'
    else:
        role_name = await promoter.get_partner_type()

    text = (
        f'–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã \n'
        f'–§–ò–û: {await promoter.get_name()}\n'
        f'–í–∞—à vr –∫–æ–¥: {await promoter.get_vr_code()}\n'
        f'–í–∞—à —Ç–∏–ø –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞: {role_name}\n'
    )
    await message.answer(text, reply_markup=promoter_keyboard)


@dp.message_handler(IsUserUnauthenticatedFilter())
async def request_phone(message: types.Message):
    text = (
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.'
        '\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º" üëáüëáüëá'
    )
    await message.answer(
        text,
        reply_markup=phone_keyboard
    )


@dp.message_handler(content_types=['contact'])
async def get_contact_handler(message: types.Message) -> None:
    phone_number = message.contact.phone_number
    if phone_number.startswith('7'):
        phone_number = '+' + phone_number
    if phone_number.startswith('8'):
        phone_number = '+7' + phone_number[1:]
    text = f'–í–∞—à –Ω–æ–º–µ—Ä: {phone_number}'
    await message.answer(text=text, reply_markup=ReplyKeyboardRemove())

    bitrix = ConnectorBitrix()
    try:
        await bitrix.update_tg_id_by_phone(
            phone=phone_number,
            tg_id=message.from_user.id
        )
        await message.answer(
            '–í–∞—à –Ω–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start',
            reply_markup=start_keyboard
        )
    except EmployeeDoesNotExist:
        await message.answer(
            ('–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.'
             '\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'),
            reply_markup=phone_keyboard
        )
    except PhoneAlreadyTaken:
        await message.answer(
            ('–¢–∞–∫–æ–π –Ω–æ–º–µ—Ä —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.'
             '–ï—Å–ª–∏ —ç—Ç–æ –≤–∞—à –Ω–æ–º–µ—Ä, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'),
            reply_markup=phone_keyboard
        )
    except EmployeeAlreadyExist:
        await message.answer(
            '–ù–∞–∂–º–∏—Ç–µ /start',
            reply_markup=start_keyboard
        )
    except DatabaseError:
        await message.answer(
            ('–í–æ–∑–Ω–∏–∫–∞–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.'
             '\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω –∏ –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ —Ä–µ—à–µ–Ω–∏—é.'
             '\n–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞'),
            reply_markup=phone_keyboard
        )
        await send_messages_to_admins(
            f'DatabaseError {phone_number} {message.from_user.id}'
        )
